---
Path: manage.py
Language: py
---
```py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "app_django.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()

```

---
Path: appli_django/views.py
Language: py
---
```py
from django.shortcuts import render

# Create your views here.
import requests

def verifier_rue(request):
    code_postal = '59000'
    nom_commune = 'Lille'
    nom_rue = 'Soleferino'
    
    # URL de votre API FastAPI
    url_api = f"https://monapi.com/verify_cp_ville_rue/?code_postal={code_postal}&nom_commune={nom_commune}&nom_rue={nom_rue}"
    
    # Appeler l'API et récupérer les données
    reponse = requests.get(url_api)
    if reponse.status_code == 200:
        donnees = reponse.json()
    else:
        donnees = {'erreur': 'Impossible de récupérer les données'}

    # Passer les données au template
    return render(request, 'verifier_rue.html', {'donnees': donnees})

```

---
Path: appli_django/__init__.py
Language: py
---
```py

```

---
Path: appli_django/admin.py
Language: py
---
```py
from django.contrib import admin

# Register your models here.

```

---
Path: appli_django/tests.py
Language: py
---
```py
from django.test import TestCase

# Create your tests here.

```

---
Path: appli_django/apps.py
Language: py
---
```py
from django.apps import AppConfig


class AppliDjangoConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "appli_django"

```

---
Path: appli_django/models.py
Language: py
---
```py
from django.db import models

# Create your models here.

```

---
Path: appli_django/migrations/__init__.py
Language: py
---
```py

```

---
Path: appli_django/templates/verifier_rue.html
Language: html
---
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Vérification de rue</title>
</head>
<body>
    <h1>Résultats de la vérification de rue</h1>
    {% if donnees.erreur %}
        <p>Erreur : {{ donnees.erreur }}</p>
    {% else %}
        <p>Code Postal : {{ donnees.code_postal }}</p>
        <p>Nom de Commune : {{ donnees.nom_commune }}</p>
        <p>Nom de Rue : {{ donnees.nom_rue }}</p>
        <!-- Afficher d'autres informations de l'API ici -->
    {% endif %}
</body>
</html>

```

---
Path: app_django/__init__.py
Language: py
---
```py

```

---
Path: app_django/wsgi.py
Language: py
---
```py
"""
WSGI config for app_django project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "app_django.settings")

application = get_wsgi_application()

```

---
Path: app_django/asgi.py
Language: py
---
```py
"""
ASGI config for app_django project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "app_django.settings")

application = get_asgi_application()

```

---
Path: app_django/urls.py
Language: py
---
```py
from django.contrib import admin
from django.urls import path
# Importez la vue depuis l'application
from appli_django.views import verifier_rue

urlpatterns = [
    path("admin/", admin.site.urls),
    path('verifier_rue/', verifier_rue, name='verifier_rue'),
    # Vous pouvez ajouter d'autres chemins ici...
]

```

---
Path: app_django/settings.py
Language: py
---
```py
"""
Django settings for app_django project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'appli_django',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "app_django.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "app_django.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

```

