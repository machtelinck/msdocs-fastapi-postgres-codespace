---
Path: manage.py
Language: py
---
```py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "app_django.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()

```

---
Path: static/css/style.css
Language: css
---
```css
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.container {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 800px;
}

h1 {
    color: #333;
    text-align: center;
}

form div {
    margin-bottom: 15px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

input[type="text"] {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

button {
    padding: 10px 20px;
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    display: block;
    margin: 20px auto;
}

button:hover {
    background-color: #218838;
}

.error {
    color: red;
    text-align: center;
}

.suggestions {
    margin-top: 20px;
    text-align: center;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin: 0 auto;
}

table, th, td {
    border: 1px solid #ddd;
}

th, td {
    padding: 10px;
    text-align: left;
}

th {
    background-color: #f2f2f2;
}

.similarity-score {
    font-size: 0.9em;
    color: #555;
}

```

---
Path: appli_django/views.py
Language: py
---
```py
from django.shortcuts import render
import requests

def verifier_rue(request):
    code_postal = request.GET.get('code_postal', '59000')
    nom_commune = request.GET.get('nom_commune', 'LILLE')
    nom_rue = request.GET.get('nom_rue', 'SOLFERINO')

    params = {
        'code_postal': code_postal,
        'nom_commune': nom_commune,
        'nom_rue': nom_rue,
    }
    
    url_api = "http://localhost:8000/verify_cp_ville_rue/"
    reponse = requests.get(url_api, params=params)

    if reponse.status_code == 200 and reponse.content:
        donnees = reponse.json()
        # Vérifiez si 'top_suggestions' est présent dans les données
        top_suggestions = donnees.get('top_suggestions', [])  # Utilisez une liste vide comme valeur par défaut
    else:
        donnees = {'erreur': 'Impossible de récupérer les données ou réponse vide'}
        top_suggestions = []  # Initialisez top_suggestions comme une liste vide dans ce cas

    return render(request, 'verifier_rue.html', {'donnees': donnees, 'top_suggestions': top_suggestions})

```

---
Path: appli_django/__init__.py
Language: py
---
```py

```

---
Path: appli_django/admin.py
Language: py
---
```py
from django.contrib import admin

# Register your models here.

```

---
Path: appli_django/tests.py
Language: py
---
```py
from django.test import TestCase

# Create your tests here.

```

---
Path: appli_django/apps.py
Language: py
---
```py
from django.apps import AppConfig


class AppliDjangoConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "appli_django"

```

---
Path: appli_django/models.py
Language: py
---
```py
from django.db import models

# Create your models here.

```

---
Path: appli_django/migrations/__init__.py
Language: py
---
```py

```

---
Path: appli_django/templates/verifier_rue.html
Language: html
---
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="../../static/css/style.css">
    <title>Vérification de rue</title>
</head>
<body>
<div class="container">
    <h1>Résultats de la vérification de rue</h1>
    <form action="{% url 'verifier_rue' %}" method="get">
        <div>
            <label for="code_postal">Code Postal:</label>
            <input type="text" id="code_postal" name="code_postal" placeholder="Entrez le code postal" required>
        </div>
        <div>
            <label for="nom_commune">Nom de Commune:</label>
            <input type="text" id="nom_commune" name="nom_commune" placeholder="Entrez le nom de la commune" required>
        </div>
        <div>
            <label for="nom_rue">Nom de Rue:</label>
            <input type="text" id="nom_rue" name="nom_rue" placeholder="Entrez le nom de la rue" required>
        </div>
        <button type="submit">Vérifier</button>
    </form>
    {% if donnees %}
        {% if donnees.erreur %}
            <p class="error">Erreur : {{ donnees.erreur }}</p>
        {% else %}
            <p>{{ donnees.message }}</p>
            {% if donnees.couple_cp_ville_existe %}
                <div class="suggestions">
                    <h2>Suggestions de rues</h2>
                    <table>
                        <thead>
                            <tr>
                                <th>Nom de la Rue</th>
                                <th>Score de Similarité</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for suggestion in top_suggestions %}
                                <tr>
                                    <td>{{ suggestion.nom_afnor }}</td>
                                    <td class="similarity-score">{{ suggestion.similarity_score }}</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% endif %}
        {% endif %}
    {% endif %}
</div>
</body>
</html>

```

---
Path: appli_django/templates/appli_django/home.html
Language: html
---
```html
<!-- fichier : templates/home.html -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Page d'accueil</title>
</head>
<body>
    <h1>Bienvenue sur notre site!</h1>
</body>
</html>

```

---
Path: app_django/__init__.py
Language: py
---
```py

```

---
Path: app_django/wsgi.py
Language: py
---
```py
"""
WSGI config for app_django project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "app_django.settings")

application = get_wsgi_application()

```

---
Path: app_django/asgi.py
Language: py
---
```py
"""
ASGI config for app_django project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "app_django.settings")

application = get_asgi_application()

```

---
Path: app_django/urls.py
Language: py
---
```py
from django.contrib import admin
from django.urls import path
# Importez la vue depuis l'application
from appli_django.views import verifier_rue



urlpatterns = [
    path("admin/", admin.site.urls),
    path('', verifier_rue, name='home'),  # Page d'accueil
    path('verifier_rue/', verifier_rue, name='verifier_rue'),
]

```

---
Path: app_django/settings.py
Language: py
---
```py
"""
Django settings for app_django project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'appli_django',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "app_django.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [ BASE_DIR/ "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "app_django.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

```

